# store away data and continue using imputed, unified version
data_env <- new.env(parent = .GlobalEnv)
#TODO: SVD
if (is_distmatrix(distance)) {
if (!(is.data.frame(data) || is.null(data))) stop('If you provide a matrix for `distance`, `data` has to be NULL or a covariate `data.frame` is of class', class(data))
data_env$data <- if (is.null(data)) distance else data  # put covariates or distance
dists <- as(distance, 'symmetricMatrix')
distance <- 'custom'
imputed_data <- NULL
n <- nrow(dists)
} else {
dists <- NULL
distance <- match.arg(distance)
data_env$data <- data
data <- extract_doublematrix(data, vars)
imputed_data <- data
if (any(is.na(imputed_data)))
imputed_data <- as.matrix(hotdeck(data, imp_var = FALSE))
n <- nrow(imputed_data)
}
# arg validation
if (n <= n_eigs + 1L) stop('Eigen decomposition not possible if n \u2264 n_eigs+1 (And ', n,' \u2264 ', n_eigs + 1L, ')')
if (is.null(k) || is.na(k)) k <- n - 1L
#TODO: optimize case
#dense <- k == n - 1L
if (k >= n) stop(sprintf('k has to be < nrow(data) (And %s \u2265 nrow(data))', k))
censor <- test_censoring(censor_val, censor_range, imputed_data, missing_range)
if (censor && !identical(distance, 'euclidean')) stop('censoring model only valid with euclidean distance')
knn <- get_knn(imputed_data, dists, k, distance, verbose)  # use dists if given, else compute from data
sigmas <- get_niko_sigmas(imputed_data, knn$dist, sigma, n_local, distance, censor_val, censor_range, missing_range, vars, verbose)
sigma <- optimal_sigma(sigmas)  # single number = global, multiple = local
trans_p <- transition_probabilities(imputed_data, sigma, knn$dist_mat, censor, censor_val, censor_range, missing_range, verbose)
rm(knn)  # free memory
d <- rowSums(trans_p, na.rm = TRUE) + 1 # diagonal set to 1
# normalize by density if requested
norm_p <- get_norm_p(trans_p, d, d, density_norm)
rm(trans_p)  # free memory
d_norm <- rowSums(norm_p)
# calculate the inverse of a diagonal matrix by inverting the diagonal
d_rot <- Diagonal(x = d_norm ^ -.5)
transitions <- as(d_rot %*% norm_p %*% d_rot, 'symmetricMatrix')
rm(norm_p)  # free memory
eig_transitions <- decomp_transitions(transitions, n_eigs, verbose)
eig_vec <- eig_transitions$vectors
if (rotate) eig_vec <- as.matrix(t(t(eig_vec) %*% d_rot))
colnames(eig_vec) <- paste0('DC', seq(0, n_eigs))
new(
'DiffusionMap',
eigenvalues   = eig_transitions$values[-1],
eigenvectors  = eig_vec[, -1, drop = FALSE],
sigmas        = sigmas,
data_env      = data_env,
eigenvec0     = eig_vec[, 1],
transitions   = if (suppress_dpt) NULL else transitions,
d             = d,
d_norm        = d_norm,
k             = k,
n_local       = n_local,
rotate        = rotate,
density_norm  = density_norm,
distance      = distance,
censor_val    = censor_val,
censor_range  = censor_range,
missing_range = missing_range)
}
niko_sigmas <- function(
data,
step_size = .1, steps = 10L,
start = NULL,
sample_rows = 500L,
early_exit = FALSE,
...,
censor_val = NULL, censor_range = NULL,
missing_range = NULL,
vars = NULL,
verbose = TRUE
) {
stopifnot(length(list(...)) == 0L)
data <- extract_doublematrix(data, vars)
if (any(is.na(data)))
data <- as.matrix(hotdeck(data, imp_var = FALSE))
stopifnot(steps >= 3L)
if (length(sample_rows) > 1L) {
data <- data[sample_rows, ]
} else if (nrow(data) > sample_rows) {
sample_idx <- sample(nrow(data), sample_rows)
data <- data[sample_idx, ]
}
n <- nrow(data)
dists <- dist(data)
min_dist <- min(dists)
if (min_dist == 0)
stop('Minimum distance in the data may not be 0')
dists <- as(dists, 'symmetricMatrix')
if (is.null(start))
start <- log10(min_dist)
#if (missing(step_size))
#  step_size = min_dist / steps
if (verbose) print(c(min_dist = min_dist, start = start, step_size = step_size))
get_trans_p <-
if (test_censoring(censor_val, censor_range, data, missing_range)) {
function(sigma) censoring(data, sigma, dists, censor_val, censor_range, missing_range)
} else {
msqd <- -(dists ^ 2)
function(sigma) exp(msqd / (2 * sigma ^ 2))
}
do_step <- function(i) {
# i can be negative!
log_sigma <- start + i*step_size
trans_p <- get_trans_p(10 ^ log_sigma)
diag_d <- colSums(trans_p, na.rm = TRUE)
list(avrd_norm = (sum(log10(diag_d/n) / diag_d)) / sum(1 / diag_d),
log_sigma = log_sigma)
}
avrd_norms <- numeric(steps)
log_sigmas <- numeric(steps)
dim_norms  <- numeric(steps - 1)
step_diff <- function(step) {
idxs <- c(step, step - 1)
diff(avrd_norms[idxs]) / diff(log_sigmas[idxs])
}
a0 <- do_step(0L)
avrd_norms[[1L]] <- a0$avrd_norm
log_sigmas[[1L]] <- a0$log_sigma
a1 <- do_step(1)
dir <- 1L
avrd_norms[[2L]] <- a1$avrd_norm
log_sigmas[[2L]] <- a1$log_sigma
if (step_diff(2L) < 0) {
a1 <- do_step(-1L)
dir <- -1L
avrd_norms[[2L]] <- a1$avrd_norm
log_sigmas[[2L]] <- a1$log_sigma
}
dim_norms[[1L]] <- step_diff(2L)
if (verbose) pb <- txtProgressBar(2L, steps, 1L, style = 3)
for (step in seq(2L, steps)) {
a_i = do_step(dir * (step - 1L))
avrd_norms[[step]] <- a_i$avrd_norm
log_sigmas[[step]] <- a_i$log_sigma
dif_step <- step - 1
dim_norms[[dif_step]] <- step_diff(step)
if (verbose) setTxtProgressBar(pb, step)
if (early_exit && step > 2 && dim_norms[[dif_step]] < dim_norms[[dif_step - 1L]]) {
avrd_norms <- avrd_norms[seq_len(step)]
log_sigmas <- log_sigmas[seq_len(step)]
dim_norms  <- dim_norms[seq_len(dif_step)]
break
}
}
if (verbose) {
setTxtProgressBar(pb, steps)
close(pb)
}
if (early_exit && step == steps) warning('All steps were exhausted without finding a maximum. Using last encountered sigma')
optimal_idx <- which.max(dim_norms)
ret <- Sigmas(
log_sigmas = log_sigmas,
dim_norms  = dim_norms,
optimal_sigma = 10 ^ mean(log_sigmas[c(optimal_idx, optimal_idx + 1L)]),
optimal_idx   = optimal_idx,
avrd_norms = avrd_norms)
if (verbose) plot(ret)
ret
}
get_niko_sigmas <- function(imputed_data, nn_dists, sigma, n_local, distance = 'euclidean', censor_val = NULL, censor_range = NULL, missing_range = NULL, vars = NULL, verbose = FALSE) {
unspecified_local <- identical(sigma, 'local')
if (unspecified_local || is.numeric(sigma)) {
if (unspecified_local) {
sig_mat <- nn_dists[, n_local, drop = FALSE]
sigma <- rowSums(sig_mat) / length(n_local) / 2
}
new('Sigmas',
log_sigmas    = NULL,
dim_norms     = NULL,
optimal_sigma = sigma,
optimal_idx   = NULL,
avrd_norms    = NULL)
} else if (identical(sigma, 'global')) {
if (!identical(distance, 'euclidean'))
stop(sprintf('You have to use euclidean distances with sigma estimation, not %s.', sQuote(distance)))
niko_sigmas(
imputed_data,
distance = distance,
censor_val = censor_val,
censor_range = censor_range,
missing_range = missing_range,
vars = vars,
verbose = verbose)
} else if (is(sigma, 'Sigmas')) {
sigma
} else {
stop(sigma_msg(sigma))
}
}
dif <- NikoMap(ddata[subsample,], sigma = 'global')
niko_sigmas <- function(
data,
step_size = .1, steps = 10L,
start = NULL,
sample_rows = 500L,
early_exit = FALSE,
...,
censor_val = NULL, censor_range = NULL,
missing_range = NULL,
vars = NULL,
verbose = TRUE
) {
print(list(...))
stopifnot(length(list(...)) == 0L)
data <- extract_doublematrix(data, vars)
if (any(is.na(data)))
data <- as.matrix(hotdeck(data, imp_var = FALSE))
stopifnot(steps >= 3L)
if (length(sample_rows) > 1L) {
data <- data[sample_rows, ]
} else if (nrow(data) > sample_rows) {
sample_idx <- sample(nrow(data), sample_rows)
data <- data[sample_idx, ]
}
n <- nrow(data)
dists <- dist(data)
min_dist <- min(dists)
if (min_dist == 0)
stop('Minimum distance in the data may not be 0')
dists <- as(dists, 'symmetricMatrix')
if (is.null(start))
start <- log10(min_dist)
#if (missing(step_size))
#  step_size = min_dist / steps
if (verbose) print(c(min_dist = min_dist, start = start, step_size = step_size))
get_trans_p <-
if (test_censoring(censor_val, censor_range, data, missing_range)) {
function(sigma) censoring(data, sigma, dists, censor_val, censor_range, missing_range)
} else {
msqd <- -(dists ^ 2)
function(sigma) exp(msqd / (2 * sigma ^ 2))
}
do_step <- function(i) {
# i can be negative!
log_sigma <- start + i*step_size
trans_p <- get_trans_p(10 ^ log_sigma)
diag_d <- colSums(trans_p, na.rm = TRUE)
list(avrd_norm = (sum(log10(diag_d/n) / diag_d)) / sum(1 / diag_d),
log_sigma = log_sigma)
}
avrd_norms <- numeric(steps)
log_sigmas <- numeric(steps)
dim_norms  <- numeric(steps - 1)
step_diff <- function(step) {
idxs <- c(step, step - 1)
diff(avrd_norms[idxs]) / diff(log_sigmas[idxs])
}
a0 <- do_step(0L)
avrd_norms[[1L]] <- a0$avrd_norm
log_sigmas[[1L]] <- a0$log_sigma
a1 <- do_step(1)
dir <- 1L
avrd_norms[[2L]] <- a1$avrd_norm
log_sigmas[[2L]] <- a1$log_sigma
if (step_diff(2L) < 0) {
a1 <- do_step(-1L)
dir <- -1L
avrd_norms[[2L]] <- a1$avrd_norm
log_sigmas[[2L]] <- a1$log_sigma
}
dim_norms[[1L]] <- step_diff(2L)
if (verbose) pb <- txtProgressBar(2L, steps, 1L, style = 3)
for (step in seq(2L, steps)) {
a_i = do_step(dir * (step - 1L))
avrd_norms[[step]] <- a_i$avrd_norm
log_sigmas[[step]] <- a_i$log_sigma
dif_step <- step - 1
dim_norms[[dif_step]] <- step_diff(step)
if (verbose) setTxtProgressBar(pb, step)
if (early_exit && step > 2 && dim_norms[[dif_step]] < dim_norms[[dif_step - 1L]]) {
avrd_norms <- avrd_norms[seq_len(step)]
log_sigmas <- log_sigmas[seq_len(step)]
dim_norms  <- dim_norms[seq_len(dif_step)]
break
}
}
if (verbose) {
setTxtProgressBar(pb, steps)
close(pb)
}
if (early_exit && step == steps) warning('All steps were exhausted without finding a maximum. Using last encountered sigma')
optimal_idx <- which.max(dim_norms)
ret <- Sigmas(
log_sigmas = log_sigmas,
dim_norms  = dim_norms,
optimal_sigma = 10 ^ mean(log_sigmas[c(optimal_idx, optimal_idx + 1L)]),
optimal_idx   = optimal_idx,
avrd_norms = avrd_norms)
if (verbose) plot(ret)
ret
}
dif <- NikoMap(ddata[subsample,], sigma = 'global')
niko_sigmas <- function(
data,
step_size = .1, steps = 10L,
start = NULL,
sample_rows = 500L,
early_exit = FALSE,
...,
censor_val = NULL, censor_range = NULL,
missing_range = NULL,
vars = NULL,
verbose = TRUE
) {
print(list(...))
# stopifnot(length(list(...)) == 0L)
data <- extract_doublematrix(data, vars)
if (any(is.na(data)))
data <- as.matrix(hotdeck(data, imp_var = FALSE))
stopifnot(steps >= 3L)
if (length(sample_rows) > 1L) {
data <- data[sample_rows, ]
} else if (nrow(data) > sample_rows) {
sample_idx <- sample(nrow(data), sample_rows)
data <- data[sample_idx, ]
}
n <- nrow(data)
dists <- dist(data)
min_dist <- min(dists)
if (min_dist == 0)
stop('Minimum distance in the data may not be 0')
dists <- as(dists, 'symmetricMatrix')
if (is.null(start))
start <- log10(min_dist)
#if (missing(step_size))
#  step_size = min_dist / steps
if (verbose) print(c(min_dist = min_dist, start = start, step_size = step_size))
get_trans_p <-
if (test_censoring(censor_val, censor_range, data, missing_range)) {
function(sigma) censoring(data, sigma, dists, censor_val, censor_range, missing_range)
} else {
msqd <- -(dists ^ 2)
function(sigma) exp(msqd / (2 * sigma ^ 2))
}
do_step <- function(i) {
# i can be negative!
log_sigma <- start + i*step_size
trans_p <- get_trans_p(10 ^ log_sigma)
diag_d <- colSums(trans_p, na.rm = TRUE)
list(avrd_norm = (sum(log10(diag_d/n) / diag_d)) / sum(1 / diag_d),
log_sigma = log_sigma)
}
avrd_norms <- numeric(steps)
log_sigmas <- numeric(steps)
dim_norms  <- numeric(steps - 1)
step_diff <- function(step) {
idxs <- c(step, step - 1)
diff(avrd_norms[idxs]) / diff(log_sigmas[idxs])
}
a0 <- do_step(0L)
avrd_norms[[1L]] <- a0$avrd_norm
log_sigmas[[1L]] <- a0$log_sigma
a1 <- do_step(1)
dir <- 1L
avrd_norms[[2L]] <- a1$avrd_norm
log_sigmas[[2L]] <- a1$log_sigma
if (step_diff(2L) < 0) {
a1 <- do_step(-1L)
dir <- -1L
avrd_norms[[2L]] <- a1$avrd_norm
log_sigmas[[2L]] <- a1$log_sigma
}
dim_norms[[1L]] <- step_diff(2L)
if (verbose) pb <- txtProgressBar(2L, steps, 1L, style = 3)
for (step in seq(2L, steps)) {
a_i = do_step(dir * (step - 1L))
avrd_norms[[step]] <- a_i$avrd_norm
log_sigmas[[step]] <- a_i$log_sigma
dif_step <- step - 1
dim_norms[[dif_step]] <- step_diff(step)
if (verbose) setTxtProgressBar(pb, step)
if (early_exit && step > 2 && dim_norms[[dif_step]] < dim_norms[[dif_step - 1L]]) {
avrd_norms <- avrd_norms[seq_len(step)]
log_sigmas <- log_sigmas[seq_len(step)]
dim_norms  <- dim_norms[seq_len(dif_step)]
break
}
}
if (verbose) {
setTxtProgressBar(pb, steps)
close(pb)
}
if (early_exit && step == steps) warning('All steps were exhausted without finding a maximum. Using last encountered sigma')
optimal_idx <- which.max(dim_norms)
ret <- Sigmas(
log_sigmas = log_sigmas,
dim_norms  = dim_norms,
optimal_sigma = 10 ^ mean(log_sigmas[c(optimal_idx, optimal_idx + 1L)]),
optimal_idx   = optimal_idx,
avrd_norms = avrd_norms)
if (verbose) plot(ret)
ret
}
dif <- NikoMap(ddata[subsample,], sigma = 'global')
guo <- read.table(file="./data/guo/GuoDescription.txt",
sep="\t", header = T, stringsAsFactors = F, check.names = F, row.names = 1)
guoft <- read.table("./data/guo/GuoFeatures.txt")
data = guo
stage = as.factor(guoft$V4)
dm <- DiffusionMap(data, sigma = "global")
raw = read.delim("~/Documents/repos/hhtree/ProcessedDatasets/TreutleinDescription.txt", stringsAsFactors=FALSE, header = T)
labels = read.table(file="~/Documents/repos/hhtree/data/BarbraCellTimes.txt", sep="", header=T, stringsAsFactors = F)
tp = as.factor(labels$assignment)
data <- as.matrix(raw)
library_size = apply(data, 1, sum)
data <- 1/library_size * data
dm <- DiffusionMap(data, sigma = "global")
dm <- DiffusionMap(data, sigma = 5)
dm <- DiffusionMap(data, sigma = "local")
dm <- DiffusionMap(data)
raw = read.delim("~/Documents/repos/hhtree/ProcessedDatasets/TreutleinDescription.txt", stringsAsFactors=FALSE, header = T)
labels = read.table(file="~/Documents/repos/hhtree/data/BarbraCellTimes.txt", sep="", header=T, stringsAsFactors = F)
tp = as.factor(labels$assignment)
data <- as.matrix(raw)
library_size = apply(data, 1, sum)
data <- 1/library_size * data
dm <- DiffusionMap(data)
JobFolder <- "../data/single/"
JobName <- "single_"
job <- paste(JobFolder, JobName, sep="")
raw <- read.table(file=paste(job, "simulation.txt", sep=""), sep="\t", header=T, row.names=1)
data <- as.matrix(raw)
JobFolder <- "./data/single/"
JobName <- "single_"
job <- paste(JobFolder, JobName, sep="")
raw <- read.table(file=paste(job, "simulation.txt", sep=""), sep="\t", header=T, row.names=1)
data <- as.matrix(raw)
library_size = apply(data, 1, sum)
data <- 1/library_size * data
labels <- read.table(paste(job, "cellparams.txt", sep=""))$branches + 1
dif <- DiffusionMap(data)
plot3d(eigenvectors(dif)[,1:3], col=labels, size=7)
JobFolder <- "./data/single/"
JobName <- "single_"
job <- paste(JobFolder, JobName, sep="")
raw <- read.table(file=paste(job, "simulation.txt", sep=""), sep="\t", header=T, row.names=1)
data <- as.matrix(raw)
library_size = apply(data, 1, sum)
data <- 1/library_size * data
labels <- read.table(paste(job, "cellparams.txt", sep=""))$branches + 1
dif <- DiffusionMap(data)
plot3d(eigenvectors(dif)[,1:3], col=labels, size=7)
dif <- DiffusionMap(data, sigma="global")
data <- read.table(file="./data/paul/Paul2015.txt",
sep="\t", header = T, stringsAsFactors = F, check.names = F, row.names = 1)
annotation <- read.csv("./data/paul/PaulCellsMapping.csv", header = F)
ddata <- as.matrix(data)
prog_cols <- c("orangered3", "gold2", "green3")
labels <- c("MEP", "CMP", "GMP")
longnames <- c("megakaryocyte/erythrocyte progenitors", "common myeloid progenitors", "granulocyte/macrophage progenitors")
cmp <- (annotation$V2 %in% 1:6)
gmp <- (annotation$V2 %in% 7:11)
mep <- (annotation$V2 %in% 12:19)
colorcells <- rep("black", dim(ddata)[1])
colorcells[cmp] <- prog_cols[1]
colorcells[gmp] <- prog_cols[2]
colorcells[mep] <- prog_cols[3]
subsample = sample(1:2730, 200)
dif <- NikoMap(ddata[subsample,], sigma = 'global')
dif <- DiffusionMap(ddata[subsample,], sigma = 'global')
subsample = sample(1:2730, 200)
dif <- DiffusionMap(ddata[subsample,], sigma = 'local')
trcoords <- sweep(eigenvectors(dif)[,1:20], eigenvalues(dif)[1:20], MARGIN=2, `*`)
plot3d(trcoords[,1:3], size=7, col=colorcells[subsample])
data <- read.table(file="./data/paul/Paul2015.txt",
sep="\t", header = T, stringsAsFactors = F, check.names = F, row.names = 1)
annotation <- read.csv("./data/paul/PaulCellsMapping.csv", header = F)
ddata <- as.matrix(data)
subsample = sample(1:2730, 200)
dif <- DiffusionMap(ddata[subsample,], sigma = 'local')
trcoords <- sweep(eigenvectors(dif)[,1:20], eigenvalues(dif)[1:20], MARGIN=2, `*`)
plot3d(trcoords[,1:3], size=7, col=colorcells[subsample])
subsample = sample(1:2730, 200)
dif <- DiffusionMap(ddata[subsample,])
trcoords <- sweep(eigenvectors(dif)[,1:20], eigenvalues(dif)[1:20], MARGIN=2, `*`)
plot3d(trcoords[,1:3], size=7, col=colorcells[subsample])
subsample = sample(1:2730, 500)
dif <- DiffusionMap(ddata[subsample,])
trcoords <- sweep(eigenvectors(dif)[,1:20], eigenvalues(dif)[1:20], MARGIN=2, `*`)
plot3d(trcoords[,1:3], size=7, col=colorcells[subsample])
subsample = sample(1:2730, 1000)
dif <- DiffusionMap(ddata[subsample,])
trcoords <- sweep(eigenvectors(dif)[,1:20], eigenvalues(dif)[1:20], MARGIN=2, `*`)
plot3d(trcoords[,1:3], size=7, col=colorcells[subsample])
plot(trcoords[,1], trcoords[,3], pch=16, col="black",
xlab="DC2", ylab="transformed DC1", cex=1.5, cex.lab=1.5, cex.axis=1.5)
plot(trcoords[,1], trcoords[,2], pch=16, col="black",
xlab="DC2", ylab="transformed DC1", cex=1.5, cex.lab=1.5, cex.axis=1.5)
points(trcoords[,1], trcoords[,2], pch=16, col=colorcells,
xlab="DC2", ylab="transformed DC1", cex=1., cex.lab=1.5, cex.axis=1.5)
dif <- DiffusionMap(ddata)
trcoords <- sweep(eigenvectors(dif)[,1:20], eigenvalues(dif)[1:20], MARGIN=2, `*`)
plot(trcoords[,1], trcoords[,2], pch=16, col="black",
xlab="DC2", ylab="transformed DC1", cex=1.5, cex.lab=1.5, cex.axis=1.5)
points(trcoords[,1], trcoords[,2], pch=16, col=colorcells,
xlab="DC2", ylab="transformed DC1", cex=1., cex.lab=1.5, cex.axis=1.5)
JobFolder <- "./data/single/"
JobName <- "single_"
job <- paste(JobFolder, JobName, sep="")
raw <- read.table(file=paste(job, "simulation.txt", sep=""), sep="\t", header=T, row.names=1)
data <- as.matrix(raw)
library_size = apply(data, 1, sum)
data <- 1/library_size * data
labels <- read.table(paste(job, "cellparams.txt", sep=""))$branches + 1
dif <- DiffusionMap(data, sigma="global")
plot3d(eigenvectors(dif)[,1:3], col=labels, size=7)
